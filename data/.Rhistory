mc<-rbind(rep(meancentered,each=(nrow(x))))
mc1<-as.data.frame(matrix(mc,ncol=ncol(x)))
mc2<-x-mc1
expsd<-aggregate(mc2,by=list(rep(1:(nrow(x2)/nSpl),each=nSpl)),sd,na.rm = na.rm)
expsd<-expsd[,2:ncol(expsd)]
expsd1<-expsd[rep(1:nrow(expsd),each=nrow(expsd)),]
expsd2<-colMeans(expsd1)
expsd3<-rbind(rep(expsd2,each=(nrow(x))))
expsd4<-as.data.frame(matrix(expsd3,ncol=ncol(x)))
autoscaling<-mc2/expsd2
autoscalingstd<-autoscaling*expsd4
autoscalingstd[order(rownames(autoscalingstd)),]->autoscalingstd2
totsd<-aggregate(autoscalingstd2,by=list(rep(1:(nrow(autoscalingstd2)/r),each=r)),sd,na.rm = na.rm)
totsd<-totsd[,2:ncol(totsd)]
rownames(totsd)<-rownames(autoscalingstd2[seq(1,nrow(autoscalingstd2),by=r),])
a<-substr(colnames(autoscalingstd2),28,nchar(colnames(autoscalingstd2)))
colnames(totsd)<-a
totse<-aggregate(x2,by=list(rep(1:(nrow(autoscalingstd2)/r),each=r)),sd,na.rm = na.rm)
totse<-totse[,2:ncol(totse)]
totse<-totse/sqrt(r)
rownames(totse)<-rownames(autoscalingstd2[seq(1,nrow(autoscalingstd2),by=r),])
a<-substr(colnames(autoscalingstd2),28,nchar(colnames(autoscalingstd2)))
colnames(totse)<-a
totmean<-aggregate(autoscalingstd2,by=list(rep(1:(nrow(autoscalingstd2)/r),each=r)),mean,na.rm = na.rm)
totmean<-totmean[,2:ncol(totmean)]
rownames(totmean)<-rownames(autoscalingstd2[seq(1,nrow(autoscalingstd2),by=r),])
a<-substr(colnames(autoscalingstd2),28,nchar(colnames(autoscalingstd2)))
colnames(totmean)<-a
if (linear)
{
if (base==2) {autoscalingstd2<-2^autoscalingstd2} else {autoscalingstd2<-10^autoscalingstd2}
}
else {}
}
else {
if (geo)
{
totmean<-aggregate(x2,by=list(rep(1:(nrow(x2)/r),each=r)),prod,na.rm = na.rm)
totmean<-totmean[,2:ncol(totmean)]
rownames(totmean)<-rownames(x2[seq(1,nrow(x2),by=r),])
a<-substr(colnames(x2),28,nchar(colnames(x2)))
colnames(totmean)<-a
totmean<-totmean^(1/r)
}
else {
totmean<-aggregate(x2,by=list(rep(1:(nrow(x2)/r),each=r)),mean,na.rm = na.rm)
totmean<-totmean[,2:ncol(totmean)]
rownames(totmean)<-rownames(x2[seq(1,nrow(x2),by=r),])
a<-substr(colnames(x2),28,nchar(colnames(x2)))
colnames(totmean)<-a
}
if (logarithm)
{if (base==2) {totmean<-log2(totmean)} else {totmean<-log10(totmean)}}
else {x2<-x2}
totsd<-aggregate(x2,by=list(rep(1:(nrow(x2)/r),each=r)),sd,na.rm = na.rm)
totsd<-totsd[,2:ncol(totsd)]
rownames(totsd)<-rownames(x2[seq(1,nrow(x2),by=r),])
a<-substr(colnames(x2),28,nchar(colnames(x2)))
colnames(totsd)<-a
totse<-aggregate(x2,by=list(rep(1:(nrow(x2)/r),each=r)),sd,na.rm = na.rm)
totse<-totse[,2:ncol(totse)]
totse<-totse/sqrt(r)
rownames(totse)<-rownames(x2[seq(1,nrow(x2),by=r),])
a<-substr(colnames(x2),28,nchar(colnames(x2)))
colnames(totse)<-a
}
cat("\n###############################################################################################\n")
cat("\n Mean of your qPCR runs : \n", "\n")
print(totmean)
cat("\n###############################################################################################\n")
cat("\n Standard deviations of your qPCR runs : \n", "\n")
print(totsd)
cat("\n###############################################################################################\n")
cat("\n Standard errors of your qPCR runs : \n", "\n")
print(totse)
cat("\n###############################################################################################\n")
return(list('Mean of your qPCR runs'=totmean,'Standard deviations of your qPCR runs'=totsd,'Standard errors of your qPCR runs'=totse))
}
totData(d2,3,geo=T,logarithm=T,10,transformation=T,5,linear=T,na.rm=T)
totData<-function(x,r,geo=T,logarithm=T,base,transformation=T,nSpl,linear=T,na.rm=na.rm)
{
x[order(rownames(x)),]->x2
if (transformation) {
if(base==2) {x<-log2(x)} else  {x<-log10(x)}
meancentered<-colMeans(x)
mc<-rbind(rep(meancentered,each=(nrow(x))))
mc1<-as.data.frame(matrix(mc,ncol=ncol(x)))
mc2<-x-mc1
expsd<-aggregate(mc2,by=list(rep(1:(nrow(x2)/nSpl),each=nSpl)),sd,na.rm = na.rm)
expsd<-expsd[,2:ncol(expsd)]
expsd1<-expsd[rep(1:nrow(expsd),each=nrow(expsd)),]
expsd2<-colMeans(expsd1)
expsd3<-rbind(rep(expsd2,each=(nrow(x))))
expsd4<-as.data.frame(matrix(expsd3,ncol=ncol(x)))
autoscaling<-mc2/expsd2
autoscalingstd<-autoscaling*expsd4
autoscalingstd[order(rownames(autoscalingstd)),]->autoscalingstd2
totsd<-aggregate(autoscalingstd2,by=list(rep(1:(nrow(autoscalingstd2)/r),each=r)),sd,na.rm = na.rm)
totsd<-totsd[,2:ncol(totsd)]
rownames(totsd)<-rownames(autoscalingstd2[seq(1,nrow(autoscalingstd2),by=r),])
a<-substr(colnames(autoscalingstd2),28,nchar(colnames(autoscalingstd2)))
colnames(totsd)<-a
totse<-aggregate(x2,by=list(rep(1:(nrow(autoscalingstd2)/r),each=r)),sd,na.rm = na.rm)
totse<-totse[,2:ncol(totse)]
totse<-totse/sqrt(r)
rownames(totse)<-rownames(autoscalingstd2[seq(1,nrow(autoscalingstd2),by=r),])
a<-substr(colnames(autoscalingstd2),28,nchar(colnames(autoscalingstd2)))
colnames(totse)<-a
totmean<-aggregate(autoscalingstd2,by=list(rep(1:(nrow(autoscalingstd2)/r),each=r)),mean,na.rm = na.rm)
totmean<-totmean[,2:ncol(totmean)]
rownames(totmean)<-rownames(autoscalingstd2[seq(1,nrow(autoscalingstd2),by=r),])
a<-substr(colnames(autoscalingstd2),28,nchar(colnames(autoscalingstd2)))
colnames(totmean)<-a
if (linear)
{
if (base==2) {autoscalingstd2<-2^autoscalingstd2} else {autoscalingstd2<-10^autoscalingstd2}
}
else {}
}
else {
if (geo)
{
totmean<-aggregate(x2,by=list(rep(1:(nrow(x2)/r),each=r)),prod,na.rm = na.rm)
totmean<-totmean[,2:ncol(totmean)]
rownames(totmean)<-rownames(x2[seq(1,nrow(x2),by=r),])
a<-substr(colnames(x2),28,nchar(colnames(x2)))
colnames(totmean)<-a
totmean<-totmean^(1/r)
}
else {
totmean<-aggregate(x2,by=list(rep(1:(nrow(x2)/r),each=r)),mean,na.rm = na.rm)
totmean<-totmean[,2:ncol(totmean)]
rownames(totmean)<-rownames(x2[seq(1,nrow(x2),by=r),])
a<-substr(colnames(x2),28,nchar(colnames(x2)))
colnames(totmean)<-a
}
if (logarithm)
{if (base==2) {totmean<-log2(totmean)} else {totmean<-log10(totmean)}}
else {x2<-x2}
totsd<-aggregate(x2,by=list(rep(1:(nrow(x2)/r),each=r)),sd,na.rm = na.rm)
totsd<-totsd[,2:ncol(totsd)]
rownames(totsd)<-rownames(x2[seq(1,nrow(x2),by=r),])
a<-substr(colnames(x2),28,nchar(colnames(x2)))
colnames(totsd)<-a
totse<-aggregate(x2,by=list(rep(1:(nrow(x2)/r),each=r)),sd,na.rm = na.rm)
totse<-totse[,2:ncol(totse)]
totse<-totse/sqrt(r)
rownames(totse)<-rownames(x2[seq(1,nrow(x2),by=r),])
a<-substr(colnames(x2),28,nchar(colnames(x2)))
colnames(totse)<-a
}
cat("\n###############################################################################################\n")
cat("\n Mean of your qPCR runs : \n", "\n")
print(totmean)
cat("\n###############################################################################################\n")
cat("\n Standard deviations of your qPCR runs : \n", "\n")
print(totsd)
cat("\n###############################################################################################\n")
cat("\n Standard errors of your qPCR runs : \n", "\n")
print(totse)
cat("\n###############################################################################################\n")
return(list('Mean of your qPCR runs'=totmean,'Standard deviations of your qPCR runs'=totsd,'Standard errors of your qPCR runs'=totse))
}
totData(d2,3,geo=T,logarithm=T,10,transformation=T,5,linear=F,na.rm=T)
q()
wilcox.test(x,y)}
wilcox.test(x,y)}
wilcox.test(x,y)}
source('~/Bureau/script tsy stats pcr.R')
?Startup
R.home
R.home(component="hom")
R.home(component="home")
.Library
.libPaths()
q()
.libPaths()
library(EMA)
install.packages(c("ABarray","affy","affyio","agilp","annotate","AnnotationDbi","aroma.affymetrix","Biobase","BiocGenerics","BiocInstaller","biomaRt","Biostrings","bitops","brew","BSgenome","BSgenome.Mmusculus.UCSC.mm10","Category","caTools","coda","colorspace","datamerge","DBI","ddCt","deldir","devtools","dichromat","digest","DynDoc","EasyqpcR","ellipse","EMA","evaluate","FactoMineR","formatR","gcrma","gdata","genefilter","GenomicRanges","ggplot2","GO.db","GOstats","gplots","graph","GSA","GSEABase","gtools","heatmap.plus","hgu133plus2cdf","hgu133plus2.db","hgu133plus2probe","HTqPCR","httr","IRanges","KEGG.db","knitr","labeling","libxml2-2.7.8","limma","maptools","MASS","matrixStats","memoise","minpack.lm","moe430acdf","multtest","munsell","org.Hs.eg.db","org.Rn.eg.db","org.Ss.eg.db","panp","plotrix","plyr","porcinecdf","porcine.db","preprocessCore","proto","qpcR","RankProd","raster","rat2302cdf","rat2302.db","rbenchmark","RBGL","RColorBrewer","RCurl","reactome.db","reshape2","rgu34acdf","rgu34a.db","R.methodsS3","robustbase","roxygen2","RSQLite","scales","scatterplot3d","siggenes","SLqPCR","sp","spdep","splancs","stringr","tkWidgets","widgetTools","XML","xtable","xtermStyle","zlibbioc","zoo"))
library(EasyqpcR)
?nrmData
?calData
?totData
example(nrmData)
e
example(totData)
example(calData)
q()
library(EasyqpcR)
example(nrmData)
Data1
Data2
Data3
?calData
?totData
example(totData)
library("gWidgets")
library("gWidgetsRGtk2")
args(qplot)
function (x, y = NULL, z = NULL, ..., data, facets = . ~ .,
margins = FALSE,
geom = "point", stat = list(NULL), position = list(NULL),
xlim = c(NA, NA), ylim = c(NA, NA), log = "", main = NULL,
xlab = deparse(substitute(x)), ylab = deparse(substitute(y
add = NULL)
library("ggplot2")
library("ggplot2")
args(qplot)
function (x, y = NULL, z = NULL, ..., data, facets = . ~ .,
margins = FALSE,
geom = "point", stat = list(NULL), position = list(NULL),
xlim = c(NA, NA), ylim = c(NA, NA), log = "", main = NULL,
xlab = deparse(substitute(x)), ylab = deparse(substitute(y
add = NULL)
args(qplot)
win = gwindow("qplot GUI")
g = ggroup(horizontal=FALSE, cont=win, expand=TRUE)
tbl = list(Quit=list(handler=function(h,...) dispose(win),i
tb = gtoolbar(tbl, cont=g)
tbl = list(Quit=list(handler=function(h,...) dispose(win)
))
tb = gtoolbar(tbl, cont=g)
obj <- gcombobox(c("hello","world"), editable=TRUE, container=gwindow())
obj <- gcombobox(c("hello","world"), container=gwindow())
obj <- gradio(c("hello","world"), container=gwindow())
obj <- gcheckboxgroup(c("hello","world"), container=gwindow())
obj <- gslider(from=0, to = 7734, by =100, value=0,
container=gwindow()
)
win <- gwindow("Hello World, ad nauseum", visible=TRUE)
group <- ggroup(horizontal = FALSE, container=win)
obj <- gbutton("Hello...",container=group,
handler = function(h,...) gmessage("world"))
obj <- glabel("Hello...", container =group,
handler = function(h,...) gmessage("world"))
obj <- gcombobox(c("Hello","world"), container=group)
obj <- gedit("Hello world", container=group)
obj <- gtext("Hello world", container=group, font.attr=list(style="bold"))
source(file.choose())
source(gfile())
source(gfile())
fileChoose <- function(action="print", text = "Select a file...",
type="open", ...) {
gfile(text=text, type=type, ..., action = action, handler =
function(h,...) {
do.call(h$action, list(h$file))
})
}
fileChoose(action="source")
fileChoose(action="setwd", type="selectdir", text="Select a directory...")
win <- gwindow("Tab delimited file upload example")
grp_name <- ggroup(container = win)
lbl_data_frame_name <- glabel(
"Variable to save data to: ",
container = grp_name
)
txt_data_frame_name <- gedit("dfr", container = grp_name)
grp_upload <- ggroup(container = win)
btn_upload <- gbutton(
text      = "Upload tab delimited file",
container = grp_upload,
handler   = function(h, ...)
{
# TODO!
}
)
use_comma_for_decimal <- function()
{
unname(Sys.localeconv()["decimal_point"] == ",")
}
chk_eurostyle <- gcheckbox(
text      = "Use comma for decimal place",
checked   = use_comma_for_decimal(),
container = grp_upload
)
status_bar <- gstatusbar("", container = win)
function(h, ...)
{
gfile(
text    = "Upload tab delimited file",
type    = "open",
action  = ifelse(svalue(chk_eurostyle), "read.delim2", "read.delim"),
handler = function(h, ...)
{
tryCatch(
{
data_frame_name <- make.names(svalue(txt_data_frame_name))
the_data <- do.call(h$action, list(h$file))
assign(data_frame_name, the_data, envir = globalenv())
svalue(status_bar) <-
paste(nrow(the_data), "records saved to variable", data_frame_name)
},
error = function(e) svalue(status_bar) <- "Could not upload data"
)
},
filter = list(
"Tab delimited" = list(patterns = c("*.txt","*.dlm","*.tab")),
"All files" = list(patterns = c("*"))
)
)
}
lmwidget <- ggenericwidget(lm)
lmwidget
library(EasyqpcR)
lmwidget <- ggenericwidget(nrmData)
ggenericwidget(sd)
q()
badCt <-
function(data,r,threshold,na.rm=F)
{
if (!is.data.frame(data) & !is.matrix(data))
stop("'relData' has to of class matrix or data.frame")
n <- ncol(data)
i<-2:n
if (is.numeric(i))
ctmean<-aggregate(data[,i],by=list(rep(1:(nrow(data[,i])/r),each=r)),mean,na.rm = na.rm)
rownames(ctmean)<-data[seq(1,nrow(data),by=r),1]
ctmean1<-ctmean[,2:n]
SD<-aggregate(data[,i],by=list(rep(1:(nrow(data[,i])/r),each=r)),std.error,na.rm = na.rm)
rownames(SD)<-data[seq(1,nrow(data),by=r),1]
SD1<-SD[,2:n]
ctmax<-aggregate(data[,i],by=list(rows=rep(1:(nrow(data[,i])/r),each=r)),max,na.rm = na.rm)
rownames(ctmax)<-data[seq(1,nrow(data),by=r),1]
ctmax1<-ctmax[,2:n]
ctmin<-aggregate(data[,i],by=list(rows=rep(1:(nrow(data[,i])/r),each=r)),min,na.rm = na.rm)
rownames(ctmin)<-data[seq(1,nrow(data),by=r),1]
ctmin1<-ctmin[,2:n]
ctdrep<-ctmax-ctmin
rownames(ctdrep)<-data[seq(1,nrow(data),by=r),1]
ctdrep1<-ctmax1-ctmin1
ctbadrep<-which(ctdrep>threshold,arr.ind=T)
return(list('Bad replicates localization' = ctbadrep))
}
library("gWidgets")
library("gWidgetsRGtk2")
ggenericwidget("badCt",cont=T)
ggenericwidget("badCt",cont=T)
Data1 <- read.delim("~/Bureau/Desktop/Data1.csv")
View(Data1)
ggenericwidget("badCt",cont=T)
library("plotrix")
ggenericwidget("badCt",cont=T)
ggenericwidget("badCt",cont=T)
gdfnotebook("Data1",cont=T)
Data1
q()
setwd(gfile(type="selectdir"))
library("gWidgets")
library("gWidgetsRGtk2")
library("gWidgetstcltk")
setwd(gfile(type="selectdir"))
remove.packages("EasyqpcR")
library("EasyqpcR")
ggenericwidget("badCt",cont=T)
ggenericwidget("badct",cont=T)
badCt
detach("package:EasyqpcR")
library("EasyqpcR")
?badCt
badCt
badCt()
data(Data1,Data2,Data3)
Data1
Data2
badCt(Data1,3,0.5,T)
q()
library("EasyqpcR")
?badCt
badCt
nrmData
remove.packages("EasyqpcR")
detach("package:EasyqpcR")
remove.packages("EasyqpcR")
q()
remove.packages("EasyqpcR")
library("EasyqpcR")
badCt
?badCt
badCt(Data1,3,0.5,T)
data(Data1)
badCt(Data1,3,0.5,T)
detach("package:EasyqpcR")
library("EasyqpcR")
badCt(Data1,3,0.5,T)
badCt(Data1,3,0.1,T)
gdfnotebook(Data1,cont=T)
badCt(Data1,0.2,T)
badCt(Data1,3,0.2,T)
badCt(Data1,3,0.2)
?badCt
badCt
gdfnotebook(Data1,cont=T)
q()
library("EasyqpcR")
gdfnotebook(cont=T)
data(Data1,Data2,Data3)
gdfnotebook(cont=T)
q()
ggenericwidget(”calData”,cont=T)
ggenericwidget("calDat,cont=T)
""
ggenericwidget("calDat",cont=T)
ggenericwidget("calData",cont=T)
ggenericwidget(cont=T)
ggenericwidget(“nrmData”,cont=T)
ggenericwidget(nrmData,cont=T)
ggenericwidget(calData,cont=T)
setwd(gfile(type="selectdir"))
setwd(gfile(type=selectdir))
setwd(gfile())
q()
setwd("~/")
library("EasyqpcR")
library("gWidgets")
library("gWidgetstcltk")
ggenericwidget("nrmData",cont=T)
gdfnotebook(cont=T,ttknotebook)
?gdfnotebook
?ttknotebook
ttknotebook()
ttknotebook(gdfnotebook)
ttknotebook(gdfnotebook,cont=T)
ttknotebook("gdfnotebook",cont=T)
ttknotebook("gdfnotebook")
ttknotebook(gdfnotebook)
ttknotebook(Data)
setwd(gfile(dir=""))
setwd(gfile(dir=""))
library("EasyqpcR")
library("gWidgets")
library("gWidgetsRGtk2")
gdfnotebook
gdfnotebook()
gdfnotebook(cont=T)
ggenericwidget
ggenericwidget("lm",cont=T)
ggenericwidget("lm")
ggenericwidget("lm",cont=T)
ggenericwidget("nrmData",cont=T)
ggenericwidgets("nrmData",cont=T)
ggenericwidget("nrmData")
ggenericwidget("lm")
ggenericwidget("lm",cont=T)
ggenericwidget("lm", cont=TRUE)
library("EasyqpcR")
library("gWidgets")
library("gWidgetstcltk")
ggenericwidget("lm", cont=TRUE)
ggenericwidget("lm", cont=TRUE,toolkit="tk")
library("EasyqpcR")
data(Data1)
Data1
?write.table
write.table(Data1, file = "qPCR_run1.csv",sep = "\t",
dec = ".", row.names = TRUE,
col.names = TRUE)
list.files()
read.table("qPCR_run1.csv",sep="\t",dec=".")
read.table("qPCR_run1.csv",sep="\t",dec=".")->a
a
badCt(a,0.3,3,na.rm=T)
?badCt
badCt(a,3,0.3,na.rm=T)
read.csv("qPCR_run1",sep="\t",dec=".")
read.csv("qPCR_run1.csv",sep="\t",dec=".")
load("~/Bureau/EasyqpcR/data/Amplification_Efficiency_calculation.rda")
load("~/Bureau/EasyqpcR/data/qPCR_run1.rda")
load("~/Bureau/EasyqpcR/data/qPCR_run2.rda")
load("~/Bureau/EasyqpcR/data/qPCR_run3.rda")
q()
load("~/Bureau/EasyqpcR/data/Amplification_Efficiency_calculation.rda")
View(Amplification_Efficiency_calculation)
View(Amplification_Efficiency_calculation)
load("~/Bureau/R_pckage_creation/EasyqpcR/data/Amplification_Efficiency_calculation.rda")
Amplification_Efficiency_calculation
q()
load("~/Bureau/EasyqpcR/data/Amplification_Efficiency_calculation.rda")
load("~/Bureau/EasyqpcR/data/qPCR_run1.rda")
load("~/Bureau/EasyqpcR/data/qPCR_run2.rda")
load("~/Bureau/EasyqpcR/data/qPCR_run3.rda")
qPCR_run1
qPCR_run2
qPCR_run3
qPCR_run4
Amplification_Efficiency_calculation
ls()
package.skeleton("lol",list=ls())
load(system.file('/data/Amplification_Efficiency_calculation.rda'))
?system.fil
?system.file
package.skeleton("lol",list=ls())
package.skeleton("loll",list=ls())
setwd("/home/sysy-nana/Bureau/EasyqpcR/data")
read.table("qPCR_run1.csv",header=TRUE,dec=".",sep="\t")
read.table("qPCR_run1.csv",header=TRUE,dec=".",sep="\t")
read.csv("qPCR_run1.csv",header=TRUE,dec=".",sep="\t")
list.files()
load("~/Bureau/R_package_creation/EasyqpcR/data/Data4.rda")
Efficiency_calculation<-Data4
rm(Data4)
ls
ls()
rm(Amplification_Efficiency_calculation)
write.table("Efficiency_calculation.csv",sep="\t",dec=".")
list.files()
write.table("Efficiency_calculation.csv")
write.table(Efficiency_calculation,file="Efficiency_calculation.csv")
list.files()
package.skeleton("lolol",list=ls())
View(qPCR_run1)
write.table(qPCR_run1,file="qPCR_run1.csv")
list.files()
